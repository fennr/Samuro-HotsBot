""""
Samuro Bot

–ê–≤—Ç–æ—Ä: *fennr*
github: https://github.com/fennr/Samuro-HotsBot

–ë–æ—Ç –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤ –ø–æ –∏–≥—Ä–µ Heroes of the Storm

"""

import pytz
from datetime import datetime
import discord
from discord import Embed, utils, Member
from discord.ext import commands
from discord_slash import cog_ext, SlashContext

import utils.library.embeds
import utils.library.profile
from utils.classes import Const
from utils import exceptions, sql, library, check
import asyncio
from utils.classes.Const import config

guild_ids = [845658540341592096]  # –°–µ—Ä–≤–µ—Ä ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


async def event_report(ctx, text):
    if ctx.guild_id == 642852514865217578:  # RU Hots
        channel_id = 848504279513956372
    else:
        channel_id = 880863858653286401
    channel = discord.utils.get(ctx.guild.channels, id=channel_id)
    message = f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ctx.author.mention}:\n{text}"
    await channel.send(message)
    await ctx.send("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", hidden=True)



class Event(commands.Cog, name="Event"):
    """
    ‚Äî –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å –∏–≤–µ–Ω—Ç–∞–º–∏
    """

    #votes_blue = set()
    #votes_red = set()

    def __init__(self, bot):
        self.bot = bot
        self.votes_blue = set()
        self.votes_red = set()

    @commands.group(name="event")
    async def event(self, ctx):
        """
        - –ö–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –ø—Ä–æ—Ñ–∏–ª–µ–π
        """
        if ctx.invoked_subcommand is None:
            await ctx.send('–î–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É #event 5x5 @10_–ø—Ä–æ—Ñ–∏–ª–µ–π')

    @event.command(name="test")
    @check.is_lead()
    async def event_test(self, ctx, *, avamember: Member = None):
        await ctx.send('–¢–µ—Å—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–≤–µ–Ω—Ç—ã –ø—Ä–æ–π–¥–µ–Ω')

    @event.command(name="poll")
    @check.is_lead()
    async def event_poll(self, ctx, *, delay=300.0):
        """
        ‚Äî –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–±–µ–¥—É
        """
        con, cur = library.get.con_cur()
        blue = 'üü¶'
        red = 'üü•'
        poll_title = "–ö—Ç–æ –ø–æ–±–µ–¥–∏—Ç?"
        guild_id = library.get.guild_id(ctx)
        embed = Embed(
            title=f"{poll_title}",
            # description=f"{poll_title}",
            color=config.success
        )
        embed.set_footer(
            text=f"5 –º–∏–Ω—É—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"
        )
        embed_message = await ctx.send(embed=embed)
        await embed_message.add_reaction(blue)
        await embed_message.add_reaction(red)
        await ctx.message.delete()
        await asyncio.sleep(delay)
        await embed_message.remove_reaction(blue, member=embed_message.author)
        await embed_message.remove_reaction(red, member=embed_message.author)
        message = await ctx.channel.fetch_message(embed_message.id)
        #print(message.reactions)
        blue_bet = []
        red_bet = []
        for reaction in message.reactions:
            if reaction.emoji == blue:
                async for user in reaction.users():
                    blue_bet.append(user.id)
            if reaction.emoji == red:
                async for user in reaction.users():
                    red_bet.append(user.id)
        try:
            select = Const.selects.EHActive
            cur.execute(select, (ctx.channel.id, True))
            record = cur.fetchone()
            self.votes_blue = set(blue_bet) - set(red_bet)
            for user in self.votes_blue:
                insert = Const.inserts.Votes
                cur.execute(insert, (user, record.event_id, 'blue'))
            self.votes_red = set(red_bet) - set(blue_bet)
            for user in self.votes_red:
                insert = Const.inserts.Votes
                cur.execute(insert, (user, record.event_id, 'red'))
        except Exception as e:
            print(e)
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è")
        library.commit(con)
        await embed_message.delete()
        await ctx.send(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    @event.command(name="poll_end")
    async def event_poll_end(self, ctx, winner, event_id):
        con, cur = library.get.con_cur()
        select = Const.selects.VotesEvent
        cur.execute(select, (event_id, ))
        records = cur.fetchall()
        text_blue = ''
        text_red = ''
        for record in records:
            if record.vote == winner:
                correct = 1
                wrong = 0
            else:
                correct = 0
                wrong = 1
            select = '''SELECT * FROM "VoteStats" WHERE id = %s'''
            cur.execute(select, (record.id, ))
            r = cur.fetchone()
            if r is None:
                insert = '''INSERT INTO "VoteStats"(id, correct, wrong) VALUES (%s, %s, %s)'''
                cur.execute(insert, (record.id, correct, wrong))
            else:
                update = '''UPDATE "VoteStats" SET correct = %s, wrong = %s WHERE id = %s'''
                cur.execute(update, (r.correct + correct, r.wrong + wrong,
                                     record.id))
            delete = '''DELETE FROM "Votes" WHERE id = %s AND event_id = %s'''
            cur.execute(delete, (record.id, record.event_id))
            library.commit(con)
            if record.vote == 'blue':
                text_blue += f"{library.get.mention(record.id)} "
            else:
                text_red += f"{library.get.mention(record.id)} "

        if winner == 'blue':
            await ctx.send(f"–ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ **—Å–∏–Ω–∏—Ö**")
            if len(text_blue) > 0:
                await ctx.send(f"–ó–∞ –ø–æ–±–µ–¥—É **—Å–∏–Ω–∏—Ö** –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {text_blue}")
            if len(text_red) > 0:
                await ctx.send(f"–ó–∞ –ø–æ–±–µ–¥—É –∫—Ä–∞—Å–Ω—ã—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {text_red}")
        if winner == 'red':
            await ctx.send(f"–ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ **–∫—Ä–∞—Å–Ω—ã—Ö**")
            if len(text_red) > 0:
                await ctx.send(f"–ó–∞ –ø–æ–±–µ–¥—É **–∫—Ä–∞—Å–Ω—ã—Ö** –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {text_red}")
            if len(text_blue) > 0:
                await ctx.send(f"–ó–∞ –ø–æ–±–µ–¥—É —Å–∏–Ω–∏—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {text_blue}")
        self.votes_blue = set()
        self.votes_red = set()

    @event.command(name="5x5")
    @check.is_lead()
    async def event_5x5(self, ctx, *args):
        """
        @ x 10 - —Å–æ–∑–¥–∞—Ç—å 5—Ö5 –Ω–∞ 10 —á–µ–ª–æ–≤–µ–∫
        """
        if len(args) != 10:
            await ctx.send("–í–≤–µ–¥–∏—Ç–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞")
        else:
            con, cur = library.get.con_cur()
            guild_id = library.get.guild_id(ctx)
            room_id = ctx.channel.id
            admin = library.get.author(ctx)
            players = []
            bad_flag = False
            for name in args:
                user_id = library.get.user_id(name)
                select = Const.selects.PlayersIdOrBtag
                cur.execute(select, (user_id, name))
                player = library.get.player(cur.fetchone())
                if player is not None:
                    players.append(player)
                else:
                    bad_flag = True
                    await ctx.send(f"–£—á–∞—Å—Ç–Ω–∏–∫–∞ {name} –Ω–µ—Ç –≤ –±–∞–∑–µ")
            if not bad_flag:
                select = Const.selects.EHActive
                cur.execute(select, (room_id, True))
                record = cur.fetchone()
                if record is None:
                    players.sort(key=utils.library.profile.sort_by_mmr, reverse=True)
                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –º–º—Ä
                    unique_mmr = []
                    for player in players:
                        while player.mmr in unique_mmr:
                            player.mmr = float(player.mmr) + 0.1
                        unique_mmr.append(player.mmr)
                    team_one_mmr, team_two_mmr = library.min_diff_sets(
                        [float(player.mmr) for index, player in enumerate(players[:-2])])
                    team_one_mmr += (float(players[-1].mmr),)
                    team_two_mmr += (float(players[-2].mmr),)
                    team_one = [player for player in players if float(player.mmr) in team_one_mmr]
                    team_two = [player for player in players if float(player.mmr) in team_two_mmr]
                    print(team_one)
                    now = str(datetime.now(pytz.timezone('Europe/Moscow')))[:19]
                    insert = Const.inserts.Event
                    cur.execute(insert, (now, admin, guild_id, True, room_id,  # ctx.message.author.name
                                         team_one[0].btag, team_one[1].btag, team_one[2].btag, team_one[3].btag,
                                         team_one[4].btag,
                                         team_two[0].btag, team_two[1].btag, team_two[2].btag, team_two[3].btag,
                                         team_two[4].btag))
                    library.commit(con)
                    team_one_discord = ' '.join([library.get.player_data(player) for player in team_one])
                    team_two_discord = ' '.join([library.get.player_data(player) for player in team_two])
                    await ctx.send(f"**–°–∏–Ω—è—è –∫–æ–º–∞–Ω–¥–∞:** \n{team_one_discord}")
                    await ctx.send(f"**–ö—Ä–∞—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:** \n{team_two_discord}")  # mean(team_blue):.2f
                else:
                    await ctx.send(f"–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π")

    @event.command(name="winner")
    @check.is_lead()
    async def event_winner(self, ctx, winner=None, delta=6, points=1):
        """
        red | blue - –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        """
        if winner == 'blue' or winner == 'red':
            con, cur = library.get.con_cur()
            room_id = ctx.channel.id
            guild_id = library.get.guild_id(ctx)
            select = Const.selects.EHActive
            cur.execute(select, (room_id, True))
            record = cur.fetchone()
            if record is not None:
                if winner == 'blue':
                    win_team = [record.blue1, record.blue2, record.blue3, record.blue4, record.blue5]
                    lose_team = [record.red1, record.red2, record.red3, record.red4, record.red5]
                else:  # red
                    lose_team = [record.blue1, record.blue2, record.blue3, record.blue4, record.blue5]
                    win_team = [record.red1, record.red2, record.red3, record.red4, record.red5]
                update = Const.updates.EHWinner
                cur.execute(update, (winner, delta, points, False,
                                     room_id, True))
                await library.team_change_stats(ctx, team=win_team, guild_id=guild_id)
                await ctx.send(f"–û—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—É –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
                await library.team_change_stats(ctx, team=lose_team, guild_id=guild_id, winner=False)
                await ctx.send(f"–û—á–∫–∏ –∑–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã")
                await ctx.send(f"–ú–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
                await self.event_poll_end(ctx, winner, record.event_id)
            else:
                await ctx.send(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            library.commit(con)
        else:
            await ctx.send(f"–£–∫–∞–∂–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è *red* –∏–ª–∏ *blue*")

    @event.command(name="remove")
    @check.is_lead()
    async def event_remove(self, ctx):
        """
        - –û—Ç–º–µ–Ω–∏—Ç—å –º–∞—Ç—á
        """
        con, cur = library.get.con_cur()
        room_id = ctx.channel.id
        delete = Const.deletes.EventActive
        cur.execute(delete, (room_id, True))
        library.commit(con)
        if cur.rowcount:  # —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–µ–π, –Ω–∞–π–¥–µ—Ç 1 –∏–ª–∏ 0
            await ctx.send(f"–ê–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã")
            self.votes_blue = set()
            self.votes_red = set()
        else:
            await ctx.send(f"–í —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –º–∞—Ç—á–µ–π")

    @event.command(name="msg")
    @check.is_samuro_dev()
    async def event_msg(self, ctx, user_id, *message):
        msg = ' '.join(message)
        try:
            user = await self.bot.fetch_user(user_id)
            await user.send(msg)
        except:
            pass

    @cog_ext.cog_slash(name="report", description="–†–µ–ø–æ—Ä—Ç –∑–∞ —Å–ª–∏–≤ –∏–≥—Ä—ã –≤ 5x5")
    async def event_report1(self, ctx: SlashContext, text):
        await event_report(ctx, text)

    @cog_ext.cog_slash(name="—Ä–µ–ø–æ—Ä—Ç", description="–†–µ–ø–æ—Ä—Ç –∑–∞ —Å–ª–∏–≤ –∏–≥—Ä—ã –≤ 5x5")
    async def event_report2(self, ctx: SlashContext, text):
        await event_report(ctx, text)


def setup(bot):
    bot.add_cog(Event(bot))
